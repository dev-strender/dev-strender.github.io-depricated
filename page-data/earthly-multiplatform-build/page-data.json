{"componentChunkName":"component---src-templates-post-jsx","path":"/earthly-multiplatform-build/","result":{"data":{"site":{"siteMetadata":{"title":"dev-strender's blog"}},"markdownRemark":{"id":"b546ebbf-d100-522a-95e0-9fe911f92697","excerpt":"개요 요즘 시대에 개발자들에게 컨테이너를 활용(Docker)한 개발을 하는 것은 너무 보편화 되어있다. 또한, 개발자라면 맥북을 많이 사용하고, 맥북을 사용한다면 M1, M2 등의 arm 아키텍쳐 기반의 운영체제를 사용하는 것이 강제가 되었다. 하지만, 대부분의 서비스는 짱짱한 서버에서 배포가 되는 편이며, 해당 서버는 대부분 x86 또는 x64 기반으로…","html":"<h2>개요</h2>\n<p>요즘 시대에 개발자들에게 컨테이너를 활용(Docker)한 개발을 하는 것은 너무 보편화 되어있다. 또한, 개발자라면 맥북을 많이 사용하고, 맥북을 사용한다면 M1, M2 등의 arm 아키텍쳐 기반의 운영체제를 사용하는 것이 강제가 되었다. 하지만, 대부분의 서비스는 짱짱한 서버에서 배포가 되는 편이며, 해당 서버는 대부분 x86 또는 x64 기반으로 구축되어 있을 것이다.</p>\n<p>핵심은 로컬 개발환경과 배포되는 개발환경이 달라, 도커 이미지를 빌드할 때, 멀티플랫폼 빌드가 선택이 아닌 필수가 되었다.</p>\n<p>물론, 현재 M1 맥북에서도 x64 기반 도커 이미지를 띄울 수는 있지만 아직 최적화가 덜 되어서 그런지, 개발 작업물을 확인할 때 다소 버벅이는 점이 발생하게 된다.</p>\n<p>물론 이를 해결하기 위해서, 도커에서도 자체적으로 docker build 가 아닌 docker buildx 를 통해서 멀티 플랫폼 빌드를 가능하게 하였다. 필자도 물론 사용해보았고, 기능적으로 부족한 점은 없었으나, 기존 간단했던 도커 빌드 커맨드 대비 다소 명령어가 복잡해지는 경향이 있었고, 특정 이미지는 빌드가 진행이 되지 않는 현상도 겪었다. (x64 환경에서 node arm 빌드를 하였더니, 몇시간이 걸리길래 누가이기나 해보자 하고 기다렸다가 싸움에서 지고(?) 취소하였다.)</p>\n<h2>Earthly</h2>\n<p>그래서 알아본 대안중 하나가 바로 Earthly(<a href=\"https://docs.earthly.dev/\">https://docs.earthly.dev/</a>) 라는 서비스? 이다. Earthly는 사실 CI(Continuous Integration)를 단순화하기 위해 등장한 서비스이다.</p>\n<p>일반적으로 도커 컨테이너 기반으로 CI를 한다고 하면, 도커 파일을 작성하여, 해당 내용 기반으로 도커 이미지를 만들고, 그 이미지를 만드는 명령어는 Makefile로 작성되어있고, Integration Test 를 수행하는 코드는 Bash로 작성되어있는 등 기술적으로 엄청 복잡하지는 않지만, 로직이 여러 파일로 분산되어있을 가능성이 높다.</p>\n<p>해당 과정을 간단하게 하는 도구이지만, Earthly 서비스에서 제공하는 Earthfile 이라는 신박한 개념이 좋아, 필자는 이것으로 멀티플랫폼 이미지를 만들곤 한다.</p>\n<h3>Earthly - 설치</h3>\n<p>설치가이드는 <a href=\"https://earthly.dev/get-earthly\">https://earthly.dev/get-earthly</a> 여기에 친절하게 작성되어있다. 맥북은 역시 homebrew가 짱이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">brew <span class=\"token function\">install</span> earthly/earthly/earthly <span class=\"token operator\">&amp;&amp;</span> earthly bootstrap</code></pre></div>\n<h3>Earthfile 작성</h3>\n<p>이제 EarthFile을 작성하는 방법을 간단하게 적어보겠다. Earthfile은 <strong>Dockerfile + Makefile</strong> 처럼 생겨서, CI를 하는데 필요한 대부분의 명령어를 지원하고 있다. 아래에 간단한 주석과 함께 go project 멀티플랫폼 빌드하는 예시를 들어보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">VERSION 0.6\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> golang:1.18-alpine</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /golang</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ARG</span> APP_IMAGE=earth-tutorial</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ARG</span> IMAGE_NAME=earth-tutorial</span>\n\nbuild:\n  <span class=\"token comment\"># 빌드하는 컨테이너 내부에 소스코드를 원하는 위치에 옮겨 폴더 구조를 잡는다. </span>\n    <span class=\"token instruction\"><span class=\"token keyword\">COPY</span> main.go .</span>\n  <span class=\"token comment\"># go build 아티팩트를 build/go-example 로 저장한다.</span>\n  <span class=\"token instruction\"><span class=\"token keyword\">RUN</span> go build -o build/go-example main.go</span>\n  <span class=\"token comment\"># 아티팩트를 저장한다.</span>\n  SAVE ARTIFACT build/${APP_NAME} /${APP_NAME}\n\nimage:\n    <span class=\"token instruction\"><span class=\"token keyword\">FROM</span> alpine:3</span>\n    <span class=\"token instruction\"><span class=\"token keyword\">COPY</span> +build/<span class=\"token variable\">${APP_NAME}</span></span>\n    <span class=\"token instruction\"><span class=\"token keyword\">CMD</span> <span class=\"token string\">\"./${APP_NAME}\"</span></span>\n    SAVE IMAGE --push ${IMAGE_NAME}:latest\n\nbuildx:\n    BUILD --platform=linux/amd64 \\\\\n        --platform=linux/arm64 \\\\\n        +image</code></pre></div>\n<p>해당 파일 하나만 작성되어있고, <code class=\"language-text\">earthly +buildx</code> 커맨드를 입력해주면 큰 작업 없이 빌드하는 과정, 이미지를 제작해주는 과정 전부 알아서해주게 된다.</p>\n<p>Makefile과 Dockerfile을 작성해보신 분이라면, 아래 코드가 굉장히 익숙하실 것이다. 조금 생소한 부분이라면, <code class=\"language-text\">COPY +build/${APP\\_NAME}</code> 이부분일텐데, 이건 earthly에서 제공하는 특별한 문법이며, 각 command에서 나온 결과물들을 다른 command로 넘길 수 있게 해주는 것이다.</p>\n<p>image 부분이 조금 복잡하다면, 그냥 바로 이미지를 만들어버릴 수도 있다. 아래는 실제 python django 프로젝트 멀티플랫폼 빌드하는 방법을 적어본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\">VERSION 0.6\n\n<span class=\"token instruction\"><span class=\"token keyword\">ARG</span> IMAGE_NAME=django-project</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ARG</span> IMAGE_TAG=latest</span>\n\nbuild:\n    <span class=\"token instruction\"><span class=\"token keyword\">FROM</span> python:3.8.1</span>\n    <span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /app</span>\n\n    <span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get update</span>\n    <span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get install -y mariadb-client-10.3</span>\n    <span class=\"token instruction\"><span class=\"token keyword\">RUN</span> pip install --no-cache-dir -U pip</span>\n\n    <span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . .</span>\n    <span class=\"token instruction\"><span class=\"token keyword\">RUN</span> pip install --no-cache-dir -r requirements.txt</span>\n\n    <span class=\"token instruction\"><span class=\"token keyword\">ARG</span> MODE</span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ARG</span> DJANGO_SUPERUSER_PASSWORD</span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ARG</span> DB_HOST</span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ARG</span> DB_PORT</span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ARG</span> DB_NAME</span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ARG</span> DB_USER</span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ARG</span> DB_PASSWORD</span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ARG</span> SECRET_KEY</span>\n\n    <span class=\"token instruction\"><span class=\"token keyword\">ENV</span> MODE=<span class=\"token variable\">$MODE</span></span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DJANGO_SUPERUSER_PASSWORD=<span class=\"token variable\">$DJANGO_SUPERUSER_PASSWORD</span></span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DB_HOST=<span class=\"token variable\">$DB_HOST</span></span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DB_PORT=<span class=\"token variable\">$DB_PORT</span></span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DB_NAME=<span class=\"token variable\">$DB_NAME</span></span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DB_USER=<span class=\"token variable\">$DB_USER</span></span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ENV</span> DB_PASSWORD=<span class=\"token variable\">$DB_PASSWORD</span></span>\n    <span class=\"token instruction\"><span class=\"token keyword\">ENV</span> SECRET_KEY=<span class=\"token variable\">$SECRET_KEY</span></span>\n    <span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"python\"</span>, <span class=\"token string\">\"/app/manage.py\"</span>, <span class=\"token string\">\"runserver\"</span>]</span>\n\n    SAVE IMAGE --push ${IMAGE_NAME}:${IMAGE_TAG}\n\nbuildx:\n    BUILD --platform linux/amd64 \\\\\n          --platform linux/arm64 \\\\\n              +build</code></pre></div>\n<p>위의 예시와는 조금 다르게, 이번에는 build 커맨드 안에서 바로 <code class=\"language-text\">SAVE IMAGE</code> 를 통해 이미지를 바로 저장하였다.</p>\n<h2>요약</h2>\n<p>일일이 쉘 스크립트로 작업 하나하나를 작성하는 것(docker_build.sh, docker_run.sh)보다 Makefile을 선호하는 사람으로써, Earthfile은 친숙하게 다가와 선호할 수 있었다. 추가로 멀티플랫폼 기능도 쉽게 붙이고, 개인적으로는 docker buildx 보다 나은 경험을 제공하였기에 당분간은 Earthfile을 적극적으로 사용하지 않을까 싶다.</p>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://docs.earthly.dev/\">https://docs.earthly.dev/</a></li>\n</ul>","frontmatter":{"title":"Earthly를 이용하여 도커 멀티 플랫폼 이미지 만들기","date":"September 29, 2022","update":"September 29, 2022","tags":["Infrastructure","Docker","multi-platform"],"series":null},"fields":{"slug":"/earthly-multiplatform-build/","readingTime":{"minutes":6.615}}},"seriesList":{"edges":[{"node":{"id":"adc30291-0e02-597f-93d0-a969fe74aeb5","fields":{"slug":"/intel-macbook-2-m1-macbook/"},"frontmatter":{"title":"인텔 맥북에서 M1 맥북으로의 이전기 (개발자 관점)"}}},{"node":{"id":"bd7514f3-5241-5e75-a6e8-5884f91fd703","fields":{"slug":"/m1-application-issue/"},"frontmatter":{"title":"M1 맥북을 사용하면서 마주하는 문제들"}}},{"node":{"id":"6dfeee4e-0090-5076-955e-51d56c297ed7","fields":{"slug":"/value-of-work/"},"frontmatter":{"title":"도서 리뷰 - 일의 격"}}},{"node":{"id":"b546ebbf-d100-522a-95e0-9fe911f92697","fields":{"slug":"/earthly-multiplatform-build/"},"frontmatter":{"title":"Earthly를 이용하여 도커 멀티 플랫폼 이미지 만들기"}}},{"node":{"id":"05c44436-fc1f-56f6-ad6b-20c260cb3519","fields":{"slug":"/mac-dark-theme/"},"frontmatter":{"title":"저만의 눈겅관 관리법"}}}]},"previous":{"fields":{"slug":"/value-of-work/"},"frontmatter":{"title":"도서 리뷰 - 일의 격"}},"next":{"fields":{"slug":"/mac-dark-theme/"},"frontmatter":{"title":"저만의 눈겅관 관리법"}}},"pageContext":{"id":"b546ebbf-d100-522a-95e0-9fe911f92697","series":null,"previousPostId":"6dfeee4e-0090-5076-955e-51d56c297ed7","nextPostId":"05c44436-fc1f-56f6-ad6b-20c260cb3519"}},"staticQueryHashes":[]}