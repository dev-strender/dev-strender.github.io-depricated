{"componentChunkName":"component---src-templates-post-jsx","path":"/gtw-words/","result":{"data":{"site":{"siteMetadata":{"title":"dev-strender's blog"}},"markdownRemark":{"id":"efa2ba8b-6501-5cb6-82a3-5d7e0a7e4a55","excerpt":"본 글은 https://developers.google.com/tech-writing/one/words 의 문서를 번역한 것입니다. 우리는 문서를 광범위하게 조사했고, 가장 좋은 문장은 주로 단어로 구성되어 있다는 것이 밝혀졌다. 친숙하지 않은 용어를 새로 정의해주세요. 글을 쓰거나 편집할 때, 사용자에게 생소할 수 있는 용어를 인식하게 해야 한다. 이러…","html":"<p><em>본 글은 <a href=\"https://developers.google.com/tech-writing/one/words\">https://developers.google.com/tech-writing/one/words</a> 의 문서를 번역한 것입니다.</em></p>\n<p>우리는 문서를 광범위하게 조사했고, 가장 좋은 문장은 주로 단어로 구성되어 있다는 것이 밝혀졌다.</p>\n<h2>친숙하지 않은 용어를 새로 정의해주세요.</h2>\n<p>글을 쓰거나 편집할 때, 사용자에게 생소할 수 있는 용어를 인식하게 해야 한다. 이러한 친숙하지 않은 용어를 발견하면, 다음 두가지 방법 중 하나를 택한다.</p>\n<ul>\n<li>만약 용어가 이미 존재한다면, 좋은 설명을 적어준다. (바퀴를 재창조할 필요는 없다.)</li>\n<li>만약 문서가 용어를 소개한다면, 새로운 용어를 정의해주세요. 만약 문서에 새로운 용어가 많이 등장한다면, glossary로 정의들을 한군데에 모아준다.</li>\n</ul>\n<h2>용어를 일관되게 사용해주세요.</h2>\n<p>프로그래밍에서 메서드 내의 다른 변수의 이름을 사용하면 컴파일이 되지 않듯, 용어를 문서 중간중간에 계속 변경하면 사용자의 머릿속에 제대로 기억이 남을 수 없습니다.</p>\n<p>교훈: 모호하지 않은 동일한 단어나 용어를 문서 전체에 일관되게 적용해주세요. 한번 구성한 요소 이름을 지정한 후에는 이름을 변경하지 마세요. 예를 들어, 다음 단락은 프로토컬 버퍼(Protocol Buffer)의 이름을 프로토버퍼(Protobuf)로 바꾼 문장의 예시입니다.</p>\n<blockquote>\n<p>Protocol Buffers provide their own definition language. Blah, blah, blah. And that's why protobufs have won so many county fairs.</p>\n</blockquote>\n<p>Google SWE George Fairbanks 는 일관적인 명명에 대해서 훌륭한 노트를 남겼습니다.</p>\n<blockquote>\n<p>동의어로 보이는 두 단어를 접하면, 저자가 내가 추적하고 이해해야 할 미묘한 차이를 인식하는가 테스트하는 것은 아닌지 의문이 듭니다.</p>\n</blockquote>\n<p>네, 테크니컬 라이팅은 제한적이지만, 적어도 훌륭한 해결책을 제공해야 합니다. 즉, 장황한 개념 이름이나 제품명을 도입할 때 해당 이름의 단축버전을 지정해줄 수 있습니다. 그러면 문서 전체에서 단축된 이름을 사용할 수 있습니다. 위의 문서를 다시 바꿔본다면,</p>\n<blockquote>\n<p><strong>Protocol Buffers</strong> (or <strong>protobufs</strong> for short) provide their own definition language. Blah, blah, blah. And that's why protobufs have won so many county fairs.</p>\n</blockquote>\n<h2>축약어를 적절히 사용해주세요.</h2>\n<p>문서 또는 섹션 내에서 생소한 축약어를 처음 사용할 때에는, 전체 용어를 입력한 다음 괄호 안에 축약어를 넣습니다. 풀네임과 축악여를 모두 볼드체로 작성해주는 것이 좋습니다. 예를 들면,</p>\n<blockquote>\n<p>This document is for engineers who are new to the <strong>Telekinetic Tactile Network</strong> (<strong>TTN</strong>) or need to understand how to order TTN replacement parts through finger motions.</p>\n</blockquote>\n<p>그 다음 아래의 예시와 같이 이후 문장/문단에서 약어를 사용할 수 있습니다.</p>\n<blockquote>\n<p>If no cache entry exists, the Mixer calls the <strong>OttoGroup Server</strong> (<strong>OGS</strong>) to fetch Ottos for the request. The OGS is a repository that holds all servable Ottos. The OGS is organized in a logical tree structure, with a root node and two levels of leaf nodes. The OGS root forwards the request to the leaves and collects the responses.</p>\n</blockquote>\n<p>동일한 문서에서 약어와 전체용어를 앞뒤로 헷갈리게 작성하지 말아주세요.</p>\n<h3>축약어를 사용해야 할까요 풀네임을 사용해야 할까요?</h3>\n<p>축약어를 적절히 사용하는 것은 좋지만, 반드시 축약어를 사용해야 할까요? 축약어는 문장 길이의 자체를 줄여주는 역할을 합니다. 예를 들어, <em>TTN</em> 은 <em>Telekinetic Tactile Network</em> 보다 단어가 2개 더 적습니다. 하지만, 축약어는 단순히 추상화일뿐, 독자들은 축약어를 보고 \b전체 용어를 머리에서 변환하는 과정을 거쳐야 하므로, \"짧은\" 축약어는 전체용어 보다는 이해하는데 조금 더 뇌에서 프로세스를 거치게 됩니다.</p>\n<p>많이 사용되는 축약어는 정체성을 갖게되어, 여러번 문서에서 등장하면 독자들은 더이상 축약어를 전체 용어로 확장하는 과정을 중단합니다. 예를 들자면, 대부분의 개발자들은 HTML이 무엇의 약자인지 까먹고 있습니다.\n여기에 몇가지 축약어를 위한 가이드라인을 제시합니다:</p>\n<ul>\n<li>많이 사용되지 않는 용어를 축약어로 정의하지 마세요.</li>\n<li>\n<p>축약어는 다음과 같은 조건을 만족할때 정의하세요.</p>\n<ul>\n<li>축약어가 전체용어보다 많이 짧을 때</li>\n<li>축약어가 문서에 많이 등장할 때</li>\n</ul>\n</li>\n</ul>\n<h3>연습문제</h3>\n<p>다음 구절을 수정해보세요. 이 구절이 문서에서 MapReduce라는 용어가 처음 등장하는 구절이며, MR이 최고의 축약형태라고 가정합니다.</p>\n<blockquote>\n<p>Jeff Dean invented MapReduce in 1693, implementing the algorithm on a silicon-based computer fabricated from beach sand, wax-paper, a quill pen, and a toaster oven. This version of MR held several world performance records until 2014.</p>\n</blockquote>\n<p>사실 여기의 정답은 선택지가 두가지가 있는데, 하나는 invented MapReduce(MR) 로 처음 축약어를 정의해주거나, 아니면 문서에 많이 등장하지 않을 수 있으므로 MR을 모두 MapReduce로 풀어서 써줄수도 있습니다.</p>\n<blockquote>\n<p>Jeff Dean invented <strong>MapReduce</strong> (<strong>MR</strong>) in... This version of MR held several...</p>\n</blockquote>\n<blockquote>\n<p>Jeff Dean invented <strong>MapReduce</strong> in... This version of MapReduce held several...</p>\n</blockquote>\n<p>부수적으로, 더 철저한 테크니컬 라이터는 또한 위 문단의 beach sand, wax-paper, quill pen, toaster oven을 글머리표로 바꿨겠지만, 이건 다른 수업에서 배우도록 합니다.</p>\n<h2>모호한 대명사를 인식해주세요.</h2>\n<p>많은 대명사들은 이전에 소개된 명사를 가리킵니다. 이러한 대명사는 프로그래밍에서는 포인터와 유사하며, 포인터처럼 대명사는 오류를 잘 일으키는 경향이 있습니다. 대명사를 부적절하게 사용하는 것은 독자들의 머리에 널포인터 오류외 동등한 인지적 현상을 야기합니다. 많은 경우에, 단순히 대명사를 피하고 명사를 다시 사용해야 합니다. 하지만, 대명사의 위험성은 때때로 위험성을 발생합니다.</p>\n<p>(저의 의견) 한국어 기술문서를 작성할 때는 크게 고려되지 않는 문제인 것 같아요. 한국어로 문서를 작성할 때에는 최대한 풀어서 작성하는 경향이 있고, 영어권과는 다르게 it, they, this, that을 혼동해서 사용하는 경우가 잘 없기 때문에, 구체적인 내용은 넘어갑니다.</p>\n<p>아래의 대명사 가이드라인을 따라주세요:</p>\n<ul>\n<li>명사를 도입한 후에만 대명사를 사용하세요. 명사를 도입하기 전에는 절대 대명사를 사용하지 마세요.</li>\n<li>대명사를 참조하는 명사에 가능한 가깝게 놓아주세요. 일반적으로, 5개 이상의 단어가 명사와 대명사를 분리한다면, 대명사를 사용하는 대신 명사를 반복하는 것을 고려하세요.</li>\n<li>명사와 대명사 사이에 또다른 명사가 존재한다면, 대명사를 사용하는 대신 명사를 재사용해주세요.</li>\n</ul>\n<h2>참고</h2>\n<ul>\n<li><a href=\"https://developers.google.com/tech-writing/one/words\">https://developers.google.com/tech-writing/one/words</a></li>\n</ul>","frontmatter":{"title":"Google Technical Writing - Words","date":"January 30, 2023","update":"January 30, 2023","tags":["Google","TechnicalWriting"],"series":"Google-Technical-Writing"},"fields":{"slug":"/gtw-words/","readingTime":{"minutes":9.54}}},"seriesList":{"edges":[{"node":{"id":"efa2ba8b-6501-5cb6-82a3-5d7e0a7e4a55","fields":{"slug":"/gtw-words/"},"frontmatter":{"title":"Google Technical Writing - Words"}}}]},"previous":{"fields":{"slug":"/my-eye-health/"},"frontmatter":{"title":"저만의 눈겅관 관리법"}},"next":null},"pageContext":{"id":"efa2ba8b-6501-5cb6-82a3-5d7e0a7e4a55","series":"Google-Technical-Writing","previousPostId":"f471eb62-e819-53a2-b59d-ce4449f5efca","nextPostId":null}},"staticQueryHashes":[]}