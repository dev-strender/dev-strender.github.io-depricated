{"componentChunkName":"component---src-pages-search-jsx","path":"/search/","result":{"data":{"allMarkdownRemark":{"nodes":[{"excerpt":"개요 저는 어릴때부터 눈하나는 좋았는데, 고등학교 들어가면서 1차적으로 눈이 나빠진 케이스입니다. 아마 이때는 책을 너무 가까이에 읽어서? 그랬던것 같아요.\n대부분의 사람들은 몸의 성장이 끝나면서 안구의 성장도 멈춘다고 하는데요, 저는 건강검진을 받아보면 해마다 시력이 조금씩 더 나빠지는 것을 느끼고 싶습니다. 시력 자체가 나빠지는 것도 문제이지만 가끔 …","fields":{"slug":"/mac-dark-theme/"},"frontmatter":{"date":"November 24, 2022","title":"저만의 눈겅관 관리법","tags":["기타"]},"rawMarkdownBody":"\n## 개요\n\n저는 어릴때부터 눈하나는 좋았는데, 고등학교 들어가면서 1차적으로 눈이 나빠진 케이스입니다. 아마 이때는 책을 너무 가까이에 읽어서? 그랬던것 같아요.\n대부분의 사람들은 몸의 성장이 끝나면서 안구의 성장도 멈춘다고 하는데요, 저는 건강검진을 받아보면 해마다 시력이 조금씩 더 나빠지는 것을 느끼고 싶습니다.\n\n시력 자체가 나빠지는 것도 문제이지만 가끔 프로젝트 일정으로 인해 밤을 새거나 하면 눈의 염증이 쉽게 생기는 편이라, 정말 힘들때는 눈에 스테로이드 안약을 넣어서 해결하고는 하는데, 많이 사용하면 녹내장이 올 확률과 시기가 빨라지기에 대부분의 시간을 고통을 참으며 보내게 되네요🥲\n\n사실 저만 개발자 아니고, 저만 컴퓨터를 많이 사용하는 편도 아닌데, _다른 사람들은 다들 괜찮은가? 제가 컴퓨터를 사용하는 환경과 주변상황이 눈에 악영향을 미치는가?_ 에 대한 의구심도 있어서, 다른분들은 눈건강 관리법을 어떻게 하는지에 대해 찾아보고, 정리하고, 실천하고 있는 것들 위주로 알려드리려고 합니다.\n\n## 다크모드 해제\n\n언제부턴가 갑자기 떠오르는 화두로, 다크모드를 사용하면 근시와 난시를 유발한다는 뉴스가 발생하였습니다. (자세한 내용은 아래 참고)\n\n실제로 안과 교수님께서도, 다크모드를 사용하면 빛의 양이 줄어들기 때문에, 글자나 내용을 더 잘 보기 위해서 눈의 조절력이 더 많이 소모되면서 눈이 근시가 될 가능성이 높아진다고 합니다. (어두운 곳에서 스마트폰을 하는 것과 비슷하다고 생각하시면 됩니다.)\n\n그러면 **다크모드는 이렇게 눈에 좋지 않은데 왜 등장하였을까?** 라는 답변으로는 배터리를 절약하고, 블루라이트를 줄여주는 효과가 있다고 합니다. \n다크모드가 공식적으로 등장하고 난 이후 어느 한 설문조사에 따르면, 80% 이상의 개발자분들이 다크모드가 생겨난 이후로 줄곧 사용해오셨다고 하는데요,(그래서 아마 여러 코드에디터도 기본으로 어두운 테마를 제공하는 것이겠죠?) 다들 눈건강은 괜찮으신지...도 궁금하네요.\n\n다크모드 자체가 주는 장단점은 확실히 있으나, 근시와 난시를 유발하는 점이 저에게는 조금 더 체감이 되어서 우선 가장 많이 사용하는 코드 에디터와, 터미널만 먼저 라이트 모드로 바꾸었습니다.\n\n![lightmode-vscode](./lightmode-vscode.png)\n\n사실 바꾸고 며칠 되지 않아서 확 체감이 될지는 모르겠지만, 체감이 되면 해당 글을 업데이트하도록 하겠습니다.\n\n## 배율 높이기\n\n저는 일반적으로 가로로 모니터를 쓰는 기준 코드에디터에서 80줄 이상 보이는게 좋아 글자를 작게 설정하고 사용하는 편이었는데요, 너무 작은 글자를 오래 읽으면 눈이 쉽게 피로해진다고 하여, 글자 크기를 기존보다는 조금 더 키워서 사용하고 있습니다.\n\n## 주변 조명을 밝게하기\n\n요것도 다크모드와 비슷한 맥락으로, 모니터를 사용할 때 주변 환경을 조금 더 밝게(정확하게 말하면 모니터의 밝기와 비슷하게) 맞춰주면 눈의 피로에 도움이 된다고 하여, 낮이든 밤이든 스탠드를 항상 켜놓고 작업하려고 하고 있습니다. 요건 체감이 막~ 된다라기 보다는 기분이 좋아요ㅎㅎ (기분이 좋은것도 눈건강에 긍정적인 영향을 미치겠죠?😊)\n\n## 영양제 복용\n\n많은 이들이 눈건강을 위해 루테인을 많이 복용하시는 것으로 알고 있는데요, 이것도 눈에 좋은 작용을 한다 아니다 갑론을박이 나름 활발한 주제로 알고 있습니다. 저는 플라시보 효과라도 있길 바라며 주 5회이상은 까먹지 않고 먹으려고 하고 있고, 추가로 비타민B, 마그네슘(눈꺼풀 떨림 방지), 간간이 홍삼 정도 챙겨먹고 있어요.\n\n## 전자책보다는 종이책\n\n전자책이 상대적으로 가격도 저렴하고, 구매 후 바로 읽을 수 있고, 보관하기 용이한 형태라 많이 애용하였으나, 어디까지나 전자책이므로 블루라이트를 저에게 가져다주는 하나의 원인이 될 수 있으므로, 진드거니 읽어야 하는 개발서적의 경우에는 종이책을 조금 더 선호하게 됩니다. 자기개발 서적같은 경우에는 필요에 따라 전자책을 구매하기도 하는데요, 대체로 오디오북을 활용하여 듣는 식으로? 책을 듣는 편이에요. 읽는것보다는 몰입도가 다소 떨어지기는 하지만, 나름대로 책을 읽었다는 사실 자체에 만족하고 있습니다.\n\n## 결론\n\n늦었다고 생각했을 때가 가장 빠르다 라는 말이 있듯이, 나이를 먹어가면 점점 더 눈이 악화되기는 하였으나 여기서 더 나빠지지 않기 위해 제가 도입한 것들을 조금 정리해보았습니다. 만약에 눈의 상태가 장기간동안 효과가 있었다 하면 추후 다른 글로 찾아뵙겠고, 혹시 다른 좋은 방법들이나 팁이 있으시다면 알려주셔도 감사하겠습니다🤗\n\n\n## 참고하면 좋은 내용\n - [클랩뉴스](https://youtu.be/m_67BIzkN-w)\n - [geeknews 토픽](https://news.hada.io/topic?id=7692&utm_source=slack&utm_medium=bot&utm_campaign=T017MTC9004)\n"},{"excerpt":"개요 요즘 시대에 개발자들에게 컨테이너를 활용(Docker)한 개발을 하는 것은 너무 보편화 되어있다. 또한, 개발자라면 맥북을 많이 사용하고, 맥북을 사용한다면 M1, M2 등의 arm 아키텍쳐 기반의 운영체제를 사용하는 것이 강제가 되었다. 하지만, 대부분의 서비스는 짱짱한 서버에서 배포가 되는 편이며, 해당 서버는 대부분 x86 또는 x64 기반으로…","fields":{"slug":"/earthly-multiplatform-build/"},"frontmatter":{"date":"September 29, 2022","title":"Earthly를 이용하여 도커 멀티 플랫폼 이미지 만들기","tags":["Infrastructure","Docker","multi-platform"]},"rawMarkdownBody":"\n## 개요\n\n요즘 시대에 개발자들에게 컨테이너를 활용(Docker)한 개발을 하는 것은 너무 보편화 되어있다. 또한, 개발자라면 맥북을 많이 사용하고, 맥북을 사용한다면 M1, M2 등의 arm 아키텍쳐 기반의 운영체제를 사용하는 것이 강제가 되었다. 하지만, 대부분의 서비스는 짱짱한 서버에서 배포가 되는 편이며, 해당 서버는 대부분 x86 또는 x64 기반으로 구축되어 있을 것이다.\n\n핵심은 로컬 개발환경과 배포되는 개발환경이 달라, 도커 이미지를 빌드할 때, 멀티플랫폼 빌드가 선택이 아닌 필수가 되었다.\n\n물론, 현재 M1 맥북에서도 x64 기반 도커 이미지를 띄울 수는 있지만 아직 최적화가 덜 되어서 그런지, 개발 작업물을 확인할 때 다소 버벅이는 점이 발생하게 된다.\n\n물론 이를 해결하기 위해서, 도커에서도 자체적으로 docker build 가 아닌 docker buildx 를 통해서 멀티 플랫폼 빌드를 가능하게 하였다. 필자도 물론 사용해보았고, 기능적으로 부족한 점은 없었으나, 기존 간단했던 도커 빌드 커맨드 대비 다소 명령어가 복잡해지는 경향이 있었고, 특정 이미지는 빌드가 진행이 되지 않는 현상도 겪었다. (x64 환경에서 node arm 빌드를 하였더니, 몇시간이 걸리길래 누가이기나 해보자 하고 기다렸다가 싸움에서 지고(?) 취소하였다.)\n\n## Earthly\n\n그래서 알아본 대안중 하나가 바로 Earthly([https://docs.earthly.dev/](https://docs.earthly.dev/)) 라는 서비스? 이다. Earthly는 사실 CI(Continuous Integration)를 단순화하기 위해 등장한 서비스이다.\n\n일반적으로 도커 컨테이너 기반으로 CI를 한다고 하면, 도커 파일을 작성하여, 해당 내용 기반으로 도커 이미지를 만들고, 그 이미지를 만드는 명령어는 Makefile로 작성되어있고, Integration Test 를 수행하는 코드는 Bash로 작성되어있는 등 기술적으로 엄청 복잡하지는 않지만, 로직이 여러 파일로 분산되어있을 가능성이 높다.\n\n해당 과정을 간단하게 하는 도구이지만, Earthly 서비스에서 제공하는 Earthfile 이라는 신박한 개념이 좋아, 필자는 이것으로 멀티플랫폼 이미지를 만들곤 한다.\n\n### Earthly - 설치\n\n설치가이드는 [https://earthly.dev/get-earthly](https://earthly.dev/get-earthly) 여기에 친절하게 작성되어있다. 맥북은 역시 homebrew가 짱이다.\n\n```bash\nbrew install earthly/earthly/earthly && earthly bootstrap\n```\n\n### Earthfile 작성\n\n이제 EarthFile을 작성하는 방법을 간단하게 적어보겠다. Earthfile은 **Dockerfile + Makefile** 처럼 생겨서, CI를 하는데 필요한 대부분의 명령어를 지원하고 있다. 아래에 간단한 주석과 함께 go project 멀티플랫폼 빌드하는 예시를 들어보겠다.\n\n```dockerfile\nVERSION 0.6\nFROM golang:1.18-alpine\nWORKDIR /golang\n\nARG APP_IMAGE=earth-tutorial\nARG IMAGE_NAME=earth-tutorial\n\nbuild:\n  # 빌드하는 컨테이너 내부에 소스코드를 원하는 위치에 옮겨 폴더 구조를 잡는다. \n    COPY main.go .\n  # go build 아티팩트를 build/go-example 로 저장한다.\n  RUN go build -o build/go-example main.go\n  # 아티팩트를 저장한다.\n  SAVE ARTIFACT build/${APP_NAME} /${APP_NAME}\n\nimage:\n    FROM alpine:3\n    COPY +build/${APP_NAME}\n    CMD \"./${APP_NAME}\"\n    SAVE IMAGE --push ${IMAGE_NAME}:latest\n\nbuildx:\n    BUILD --platform=linux/amd64 \\\\\n        --platform=linux/arm64 \\\\\n        +image\n```\n\n해당 파일 하나만 작성되어있고, `earthly +buildx` 커맨드를 입력해주면 큰 작업 없이 빌드하는 과정, 이미지를 제작해주는 과정 전부 알아서해주게 된다.\n\nMakefile과 Dockerfile을 작성해보신 분이라면, 아래 코드가 굉장히 익숙하실 것이다. 조금 생소한 부분이라면, `COPY +build/${APP\\_NAME}` 이부분일텐데, 이건 earthly에서 제공하는 특별한 문법이며, 각 command에서 나온 결과물들을 다른 command로 넘길 수 있게 해주는 것이다.\n\nimage 부분이 조금 복잡하다면, 그냥 바로 이미지를 만들어버릴 수도 있다. 아래는 실제 python django 프로젝트 멀티플랫폼 빌드하는 방법을 적어본다.\n\n```dockerfile\nVERSION 0.6\n\nARG IMAGE_NAME=django-project\nARG IMAGE_TAG=latest\n\nbuild:\n    FROM python:3.8.1\n    WORKDIR /app\n\n    RUN apt-get update\n    RUN apt-get install -y mariadb-client-10.3\n    RUN pip install --no-cache-dir -U pip\n\n    COPY . .\n    RUN pip install --no-cache-dir -r requirements.txt\n\n    ARG MODE\n    ARG DJANGO_SUPERUSER_PASSWORD\n    ARG DB_HOST\n    ARG DB_PORT\n    ARG DB_NAME\n    ARG DB_USER\n    ARG DB_PASSWORD\n    ARG SECRET_KEY\n\n    ENV MODE=$MODE\n    ENV DJANGO_SUPERUSER_PASSWORD=$DJANGO_SUPERUSER_PASSWORD\n    ENV DB_HOST=$DB_HOST\n    ENV DB_PORT=$DB_PORT\n    ENV DB_NAME=$DB_NAME\n    ENV DB_USER=$DB_USER\n    ENV DB_PASSWORD=$DB_PASSWORD\n    ENV SECRET_KEY=$SECRET_KEY\n    CMD [\"python\", \"/app/manage.py\", \"runserver\"]\n\n    SAVE IMAGE --push ${IMAGE_NAME}:${IMAGE_TAG}\n\nbuildx:\n    BUILD --platform linux/amd64 \\\\\n          --platform linux/arm64 \\\\\n              +build\n```\n\n위의 예시와는 조금 다르게, 이번에는 build 커맨드 안에서 바로 `SAVE IMAGE` 를 통해 이미지를 바로 저장하였다.\n\n## 요약\n\n일일이 쉘 스크립트로 작업 하나하나를 작성하는 것(docker\\_build.sh, docker\\_run.sh)보다 Makefile을 선호하는 사람으로써, Earthfile은 친숙하게 다가와 선호할 수 있었다. 추가로 멀티플랫폼 기능도 쉽게 붙이고, 개인적으로는 docker buildx 보다 나은 경험을 제공하였기에 당분간은 Earthfile을 적극적으로 사용하지 않을까 싶다.\n\n## 참고\n\n-   [https://docs.earthly.dev/](https://docs.earthly.dev/)"},{"excerpt":"총평 시기가 개인적으로 조금 힘든 시기일 때 읽어서 그런지는 모르겠으나, 전반적으로 책을 읽으면서 위로가 많이 되었던 책이었습니다.\n요약한 내용을 보아도 책이 주는 감동을 주지 못하네요. 일에 욕심이 많으신 분들은 한번쯤 읽어보시는 것을 추천드립니다. 👍👍👍 조직을 성공으로 이끄는 리더십의 발견 비판하는 내용이 동일한 내용이라도 내가 존경하는 사람이 주면…","fields":{"slug":"/value-of-work/"},"frontmatter":{"date":"May 13, 2022","title":"도서 리뷰 - 일의 격","tags":["책","비개발도서","자기개발"]},"rawMarkdownBody":"\n## 총평\n\n시기가 개인적으로 조금 힘든 시기일 때 읽어서 그런지는 모르겠으나, 전반적으로 책을 읽으면서 위로가 많이 되었던 책이었습니다.\n요약한 내용을 보아도 책이 주는 감동을 주지 못하네요. 일에 욕심이 많으신 분들은 한번쯤 읽어보시는 것을 추천드립니다. 👍👍👍\n\n## 조직을 성공으로 이끄는 리더십의 발견\n\n- 비판하는 내용이 동일한 내용이라도 내가 존경하는 사람이 주면 감사하다. 오히려 한 마디라도 더 들어 나를 개선하고 싶다.\n- '왜 잘 될까?' 를 파악한 후 그 비결을 확산하는 것이, 안되는 것의 원인을 찾아 잘 되게 노력하는 쪽보다 빠르다.\n- 중요한 자리의 사람을 쓰는 방법\n    - 잘못 배치했을 경우, 솔직히 잘못 배치한 실수를 인정하고 그 자리에서 빨리 내려오게 해야 한다.\n- 어떻게 조직의 실력을 급속히 향상시킬까?\n    - 그 분야 최고 전문가를 모셔오는 것이다.\n- 평가\n    - 성과가 비슷하다면, 가장 많은 것을 헌신한 직원, 만일 어려운 상황이었다면 가장 피해를 보았을법한 직원, 가장 리스크가 큰 업무를 맡은 직원을 우대.\n- 회사의 핵심가치는 돈 벌 다른 기회가 있을 때도 이것 대신 선택할 베짱이 있어야 하는 가치이며 의사결정의 최고 우선순위이다.\n- 우리가 책에서 보는 최고의 실행을 도입할 때 주의할 것 중 하나는 Context를 놓치면 안 된다는 것이다. 저자들이나 강연자들 또한 다른 회사들의 사정을 알 리가 없다.\n- 좋은 실행을 배우는 것은 좋으나 그것을 맹신하면 위험하다.\n- 자신을 성공으로 이끈 개인 성향 또는 조직의 원칙, 문화가 실패로 이끌 수도 있다. 논리나 데이터를 중시한는 부분은 그것이 반드시 최상의 결과를 가져오지 않을 수 있다는 것을 받아들일 필요가 있다.\n- \"사람을 바꾸는 비결이 무엇일까요?\" 가 아니라 \"그 스스로 변화를 선택하게 도우려면 어떻게 할까요?\" 라고 질문해야 한다. 변화란 상대의 선택이다. 상대의 삶은 내 것이 아니다. 단지, 그 앞에 어떤 선택이 있고, 그 선택들의 결과가 어떠할 것이라는 것을 깨닫게 해주는 것이 우리가 할 수 있는 최선이다.\n- (리더의 덕목 중 공감) 가능한 쉽게 알려야 하고, 내 중심이 아니라 상대나 회사에 어떤 가치를 기여하는지 상대방의 관점에서 알려주어야 한다.\n- 프로는 스스로 동기부여를 한다. 리더는 진심으로 설명하되 그래도 구성원이 스스로 동기를 못 찾으면 어쩔 수 없다. \"내가 왜 일을 하는가? 내가 존중하는 삶의 가치는 무엇인가?\"\n- 세상은 꿈을 권고하는 사람을 따르는 게 아니라, 자신의 꿈이 선명한 사람을 따른다.\n- 아는 체 하지 말고 겸손하게 모른다는 것을 인정하고, 매일이 새로운 날이 되도록 배우고 탐구하고 실험하라.\n- 회사 다닌 기간이 중요한 것이 아니다. 중요한 것은 얼마나 배우고 성장했는가이다.\n- \"저 직원은 무능할지도 몰라\", \"저 직원은 무능해\" 라는 관점을 갖는 것만으로도 실제 그 직원은 무능해질 수 있다.\n\n"},{"excerpt":"개요 이전에 한번 M1 맥북을 찬양하는 글을 작성한 적이 있어요. 하지만 단점도 아직 많이 존재하는 것 같아, 해당 내용은 몰아서 작성해보면 어떨까 합니다.\n해당 내용은 지속적으로 업데이트 해드리겠습니다. 1. Docker 가 아직 불안정합니다. 맥에서 docker desktop을 사용하시면  항목이 존재하는데요, 해당 항목을 켜놓고 도커를 계속 실행시켜…","fields":{"slug":"/m1-application-issue/"},"frontmatter":{"date":"April 15, 2022","title":"M1 맥북을 사용하면서 마주하는 문제들","tags":["전자기기"]},"rawMarkdownBody":"\n## 개요\n\n이전에 한번 M1 맥북을 찬양하는 글을 작성한 적이 있어요. 하지만 단점도 아직 많이 존재하는 것 같아, 해당 내용은 몰아서 작성해보면 어떨까 합니다.\n해당 내용은 지속적으로 업데이트 해드리겠습니다.\n\n### 1. Docker 가 아직 불안정합니다.\n\n맥에서 docker desktop을 사용하시면 `Experimental features -> Use the new Virtualization Framework` 항목이 존재하는데요, 해당 항목을 켜놓고 도커를 계속 실행시켜놓으면 알게 모르게 계속 메모리를 잡아먹고 있는 것 같습니다.\n\n![m1-bug-docker-memory](./m1-bug-docker-memory.png)\n\n\n해당 기능을 사용했을 때 개인적으로 느낀 장점은, 서버 도커를 기준으로 ARM, amd64 도커 구분 없이 실행이 빠르게 수행되었다는 장점이 존재하였지만, 실행시간이 길어질수록 계속해서 메모리를 많이 잡아먹는 것 같아요.  초기메모리도 많이 잡아먹었던 것 같습니다.\n\n\n### 2. GPU core issue (?)\n\n해당 이슈를 어떻게 정의해야 할지 모르겠습니다. 보통 절전 모드에서 돌아왔을 때라던가, 클램쉘 모드 + 절전모드에서 돌아왔을 때 마주하는 문제이긴 한데요,\n특정 화면에서 입력되는 부분이 2개가 발생하는 등 어색한 현상이 발생하고는 합니다.\n딱히 해결책은 잘 모르겠어요ㅎㅎㅎ 그냥 가끔 발생하니 그러려니 하고 넘어갑니다🥲\n\n![m1-bug-chrome-ui](./m1-bug-chrome-ui.png)\n\n\n"},{"excerpt":"배경 설명 (사건의 개요) 저는 현재 재택근무를 하는 회사에 다니고 있고, 재택근무를 하다보니 4k 모니터 2개 + 맥북프로 조합으로 사용하고 있었습니다.\n현재 회사에 다닐때 업무지원기기 예산을 통해, 그당시 최고의 맥북프로인 인텔 i9 16인치를 구매하게 되었죠.\n인공지능 개발도 드문드문 진행하지만, 소프트웨어 개발도 하는 포지션이었어서, 램 32기가 …","fields":{"slug":"/intel-macbook-2-m1-macbook/"},"frontmatter":{"date":"March 30, 2022","title":"인텔 맥북에서 M1 맥북으로의 이전기 (개발자 관점)","tags":["전자기기"]},"rawMarkdownBody":"\n## 배경 설명 (사건의 개요)\n\n저는 현재 재택근무를 하는 회사에 다니고 있고, 재택근무를 하다보니 4k 모니터 2개 + 맥북프로 조합으로 사용하고 있었습니다.\n현재 회사에 다닐때 업무지원기기 예산을 통해, 그당시 최고의 맥북프로인 인텔 i9 16인치를 구매하게 되었죠.\n인공지능 개발도 드문드문 진행하지만, 소프트웨어 개발도 하는 포지션이었어서, 램 32기가 SSD 1T옵션으로 구매하였습니다.\n\n또한 입사 당시만 하더라도, 오피스텔에 기본적으로 빌트인 된 책상에서 작업을 하다보니 듀얼 모니터는 꿈도 꾸지 못하고,\n27인치 QHD 모니터 + 맥북 16프로 이렇게 두개를 배치하여 사용하고 있었습니다. (상상이 아마 가시겠죠??)\n\n인텔 맥의 고질적인 문제로, 아무래도 외장그래픽이 돌아갈 경우에 발열과 소음이 상당해지는 편인데,\n그 당시만 하더라도 이 맥북이 노트북 계열에선 최고니까 그러려니 하고 이해하고 봐줬습니다(?).\n\n하지만 그로부터 한 1여년 정도가 지나고, 저도 모션 데스크라는 신문물을 도입하였고, 책상의 크기가 커지다보니 노트북은 클렘쉘모드 +\n모니터는 4k 듀얼모니터 구성으로 작업공간을 바꿨습니다.\n\n문제는 이때부터였는데, 노트북이 무슨 항상 80~100도 가까이에서 CPU 온도를 유지하고, 팬이 항상 풀로드로 돌다보니 소음이 이만저만이 아니었습니다. 추가로, OS를 Big Sur로 올리고 난 이후 절전모드도 자기맘대로 해제되고,\n자기 맘대로 해제되면 다시 팬은 풀로드로 돌기 시작하고, 한글 타이핑은 반박자 늦게정도면 이해하겠는데 한 2.8박자 정도 늦게 입력되고\n(다행히 영어입력은 괜찮았어서 슬랙이나 메모를 할때 조금 답답하였지, 코딩자체는 다행이도 문제가 없어 참았던 것 같네요) 스트레스가 이만저만이 아니었네요. (보통 절전모드로 하고 다음날 잠금 해제를 하는 편인데, 자다가 중간에 시끄러워서 깬적이 몇번이더라...)\n\n서론이 길었지만, **이정도면 새로운 M1 맥북프로를 구입하기에 충분한 명분인 것 같아 질렀습니다!**\n\n사실 저는 물건을 구매하기에 앞서서 엄청 신중한 편인데, 영상 편집자나 디자이너 관점에서 정리한 글들은 많지만, 개발자의 관점에서 정리된 유투브 영상이나 블로그 글이 국내 해외 가리지 않고 정보가 많이 없는 것 같아 글을 남기려고 합니다.\n\n## 어떤 모델을 선택하였는가?\n\n### 1.14인치 vs 16인치\n\n예전에는 화면 크기로 맥북프로 고급형의 기준을 나누었다면, 현재는 큰 차이는 없다고 생각합니다. 화면크기, 무게, 냉각성능 정도랄까요.\nm1 맥북프로로 넘어오면서, 포트수가 증가하였고, 노트북 자체가 더 두꺼워짐에 따라서 무게도 상대적으로 같이 증가하였어요.\n물론 16인치를 선택했다면 휴대했을 때 더 넓직한 화면으로 더 많은 라인들을 볼 수 있겠지만,\n저는 상대적으로 휴대할 일이 잦은 편이 아니라서, 굳이 16인치를 고를 이유가 없어 **14인치** 로 결정하였습니다.\n\n### 2. CPU (M1 Pro vs M1 Max)\n\n적기에는 두가지의 옵션만 적어두었으나, 사실 M1 프로도 여러 종류, M1 Max도 여러 종류로 나뉘기는 하는데요,\n근본적으로는 CPU는 동일하고 GPU랑 뉴럴 엔진 코어의 숫자 차이? 에 있었던 것 같습니다. 저는 가끔 디자이너분들이 작업해주신 작업내역을\n확인하는 용도 외에 그래픽 관련 도구를 사용하지는 않고(유투브 볼때가 아마 GPU가 가장 바쁘게 일할때일거에요), 그러면 어차피 CPU는 M1 Pro와 M1 Max가 성능이 동일하다는 평가를 받고 있었기에, 고민도 할 것없이 **M1 Pro**를 선택하였습니다. M1 Pro중에서도 2효율 8고성능 10코어 모델로요.\n\n### 3. RAM 16GB vs 32GB\n\n다다익램은 개발자분들 사이에서 많이 사용되죠. 이거는 정말로 개인별로 노트북을 어떻게 사용하느냐에 대한 차이인 것 같아요.\n저같은 경우 일할때 사용하는 프로그램들이, 탭을 많이 열어놓고 작업하지는 않지만 브라우저를 분리해서 사용하고 있어서 브라우저 3개,\n슬랙, 카카오톡, VPN, ToDo 앱, 캘린더, 프로젝트 관리 앱 정도는 항상 거의 켜져 있는 상태이고, 여기에 어떤 개발을 하느냐에 따라 다르지만\n인텔리제이, vscode, 피그마, 터미널, 도커를 추가로 구동해서 사용하는 편입니다. (이렇게 적어놓고 보통 나열한 것들을 전부 다 필요해서 실행하죠.) (_그 외에도 자원 모니터링 도구, magnet, next meeting, trailer, remotion 등등 실행은 거의 안하지만 백그라운드에서 항상 돌고 있는 프로그램들도 있어요._)\n\n![m1-memory-usage](./m1-memory-usage.png)\n\n그랬을 때, 보통 사용하는 메모리를 보면 19기가 언저리에서 사용되곤 하는데, 이정도면 16GB로 선택하였어도 맥에서 스왑 영역을 알아서 잘 관리해주겠지만, 여기서 추가로 더 실행해야 할 프로그램이 추후에 있을 수 있으니 32기가를 선택하였습니다.\n\nM1 맥이라고 인텍 맥을 사용하는 것 대비 메모리를 더 적게 소모하거나, 더 많이 소모하거나 하는 경향은 거의 없는 것 같아요.\n다만, 로제타로 실행되는 프로그램들의 경우에는 인텔 맥보다 더 많이 소모하는 것 같습니다. 그래서 결론은 **32GB!**\n\n### 4. SSD 용량\n\n사실 SSD 용량때문에 저를 엄청 고민하게 하였습니다. SSD 용량을 512로 선택하면 가격도 저렴해지고, 배송도 많이 빨라지는 선택지여서 확\n이걸로 주문하고 빠르게 배송받아?! 라는 마인드도 잠깐 가졌었지만, 기존 인텔 맥에서도 1T 모델을 사용하고 있었고, 생각보다 도커 이미지들이 로컬에 많아지면 스토리지는 금방금방 가득 차는 것 같아요. 또 어떤 이유에서인지 모르겠지만 애플이 시스템 데이터를 계속 늘려가지고 꽉차게 됩니다.\n\n이런 부분에서 스트레스 받지 않기 위해서 **1T** 모델로 선택하였습니다.\n\n## 바꾸고 난 후기는?\n\n위에서 어떤 모델을 선택하였는지에 대해서 나름 명분을 가지고 열심히 설명드렸는데요, 저의 총평은 **너무 후회한다**는 것입니다.\n후회하는 이유는, _이 좋은 M1맥북을 고민하는데 왜 그렇게 오랜 시간동안 고민하였을까_ 에 대한 후회에요.\n\n바꾸기 전에는 기존에 사용하던 프로그램들이 호환이 안되면 어떡하지, 나름 인텔맥도 최고급 모델이었는데 최고급이 아닌 모델로 바꿨는데 작업이 더 비효율적으로 바뀌면 어떡하지 에 대한 고민이 있었는데, 오희려 훨씬 더 쾌적하고 저의 가장 큰 행복은 더이상 소음도 발생하지 않고, 발열도 없고, 너무나도 일하는 환경이 쾌적해졌다는 점에서 별을 백만개 주고 싶네요.\n\n다만 아직 불안정한 부분은 확실히 존재합니다. 프로그램이 예기치 않게 종료되는 경우도 아~주 가끔 발생하게 되고, 로제타 기반으로 돌아가는 프로그램의 경우 종종 리소스를 어마어마하게 잡아먹기도 해요. 이럴때는 알아서 수동으로 강제종료를 해주어야 한다는 점.\n\n![m1-rosetta-bug](./m1-rosetta-bug.png)\n\n그리고, CPU 사용량에서 놀아웠던 점은, 생각보다 고효율 코어만 열심히 일을 할 뿐 고성능 코어는 놀고있을 때가 더 많다는 점입니다. 위에서 언급하였듯 제가 저렇게 많은 프로그램을 실행하고 있는 환경에서도, 고효율 코어 2개가 감당하기에는 아직 작업량이 턱없이 부족해보입니다. 노드 빌드나 도커 빌드를 할때, 최초로 프로그램을 실행할 때 멀티프로세싱이 필요한 경우를 제외하면 고성능 코어는 거의 계속 쉬고 있는 것 같아요.\n그런 관점에서는 8코어 CPU를 구매하였어도 크게 불만없이 잘 사용하였을 것 같아요.\n\n## M1 맥북프로, 추천하나요?\n\n결론은 반은 동의, 반은 동의하지 않는데요(?)\n\n우선 개발자 관점에서 확실한 것은 M1 Max 모델을 구매하지 않는다면 저는 충분히 구매를 해도 괜찮을 것 같습니다. 8코어 CPU, 10코어 CPU 크게 체감하시지는 못할 것 같아요. 램도 32GB까지 필요하지 않으시다 하시면 저는 더더욱 저렴한 맥미니나 맥북 에어를 선택하였을 것 같고, 도커나 가상화를 많이 사용하시지 않는 개발자라면, 아니면 사용하시더라도 아주 기본적인 것들만 사용하시는 편이라면 저는 램도 16기가 정도면 충분할 것 같습니다.\n\n추천을 해드리자면,\n\n- 맥북 처음써보는 누구나(개발자, 디자이너, 일반인)\n  - 무조건 맥북에어 8기가 모델! 본인에게 안맞을수도 있으니, 우선 사용해보시고, 적응하시다가 부족한 점이 있으시면 다시 모델 탐색하셔서 본인에게 맞는 모델 재구매하시는 편이 괜찮을 것 같아요.\n- 컴퓨터를 전공하는 대학생\n  - 맥북에어 램 16기가 SSD 256/512 기가 (지금 예산을 아끼셔서 취업하시고 M2, M3 모델 나오고 변경하시면 베스트)\n- 신입 개발자\n  - M1 pro. (CPU, 램, SSD는 본인 사용패턴에 맞게 취사선택하시면 될 것 같아요. (혹시 램 64기가 필요하신 분 있으신가요..?))\n- 내 눈은 소중해! 6k 모니터 3개 이상 연결해서 사용할거다\n  - 별 수 없이 M1 Max. (M1 Pro도 6k 60Hz 2대까지 지원해요)\n\n---\n\n종종 문제가 발생하면 M1 비난글, 그렇지 않다면 M1 찬양글을 작성할테지만, 혹시 M1 노트북을 사용하면서 궁금하신 사항이 있으시다면 아래 댓글로 문의주시면 감사하겠습니다 :)\n"}]}},"pageContext":{}},"staticQueryHashes":[]}