{"version":3,"file":"component---src-templates-post-template-tsx-fc5276a6300fa7966c2c.js","mappings":"wOAWA,IAAMA,GAAsB,cAAH,oBAAG,CAAH,8FAOnBC,GAAQ,aAAH,oBAAG,CAAH,4QAiBLC,GAAW,cAAH,oBAAG,CAAH,oNAiBRC,GAAe,QAAO,gBAAMC,EAAN,2BAC1B,QAAC,KAASA,KADS,sBAAH,4DAOZC,GAAsB,cAAH,oBAAG,CAAH,0DA+BzB,EA1B2D,YAIxD,IAHDC,EAGC,EAHDA,MACAC,EAEC,EAFDA,KACAC,EACC,EADDA,WAIA,OACE,QAACR,EAAD,MACE,QAACC,EAAD,KAAQK,IACR,QAACJ,EAAD,MACE,mBAAMK,IACN,QAACF,EAAD,KACGG,EAAWC,KAAI,SAAAC,GACd,OACE,QAACP,EAAD,CAAcQ,GAAE,cAAgBD,EAAYE,IAAKF,GAAjD,IACIA,UCzElB,IAAMG,GAAkB,cAAH,oBAAG,CAAH,mEAkBrB,EAZmD,YAIhD,IAHDP,EAGC,EAHDA,MACAC,EAEC,EAFDA,KACAC,EACC,EADDA,WAEA,OACE,QAACK,EAAD,MACE,QAAC,EAAD,CAAcP,MAAOA,EAAOC,KAAMA,EAAMC,WAAYA,MCb1D,IAAMM,GAAmB,cAAH,oBAAG,CAAH,m8BAoItB,EAJyD,YAAoB,IAARC,EAAQ,EAARA,KACnE,OAAO,QAACD,EAAD,CAAkBE,wBAAyB,CAAEC,OAAQF,MC9H9D,IAAMG,GAAa,cAAH,mBAAG,CAAH,iJAWVC,GAAc,cAAH,mBAAG,CAAH,qHAMXC,GAAwB,aAAH,mBAAG,CAAH,+FAOrBC,GAAa,aAAH,mBAAG,CAAH,gDAIVC,GAAU,YAAH,mBAAG,CAAH,iEA+Bb,EA1ByC,YAAwB,IAAZC,EAAY,EAAZA,SACnD,OACE,oBACE,QAACL,EAAD,MACE,QAACC,EAAD,MACE,QAACC,EAAD,KACGG,EAASd,KAAI,SAAAe,GACZ,OACE,QAACH,EAAD,CAAYT,IAAKY,EAAQC,QACvB,QAACH,EAAD,CACEI,KAAI,IAAMF,EAAQC,MACfE,QAAQ,OAAQ,KAChBC,eAEFJ,EAAQC,gBCtD7B,IAaMI,GAAoB,cAAH,oBAAG,CAAH,qEAkCvB,EA5ByC,WACvC,IAAMC,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,WACR,GAAwB,OAApBF,EAAQG,QAAZ,CAEA,IAAMC,EAAgCC,SAASC,cAAc,UAEvDC,EAAuC,CAC3CC,IA5BM,gCA6BNC,KA5BO,6BA6BP,aAAc,WACdC,MAAO,UACPC,MAAO,eACPC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQ,YAAkB,IAAhBlC,EAAgB,KAAXa,EAAW,KACnDS,EAAWa,aAAanC,EAAKa,MAG/BK,EAAQG,QAAQe,YAAYd,MAC3B,KAEI,QAACL,EAAD,CAAmBoB,IAAKnB,KCrBjC,IAAMoB,GAAsB,cAAH,mBAAG,CAAH,8DAKnBC,GAAqB,cAAH,mBAAG,CAAH,0DAkCxB,EA7B2D,YAIxD,IACD,EADC,EAHDC,KACEC,kBAAqBC,MASb,GALRC,KACExC,EAFJ,EAEIA,KACAQ,EAHJ,EAGIA,SAHJ,IAIIiC,YAAelD,EAJnB,EAImBA,MAAOC,EAJ1B,EAI0BA,KAAMC,EAJhC,EAIgCA,WAIhC,OACE,QAACiD,EAAA,EAAD,MACE,QAACP,EAAD,MACE,QAAC,EAAD,CAAU5C,MAAOA,EAAOC,KAAMA,EAAMC,WAAYA,KAChD,QAAC2C,EAAD,MACE,oBACE,QAAC,EAAD,CAAapC,KAAMA,KACnB,QAAC,EAAD,QAEF,QAAC,EAAD,CAAKQ,SAAUA","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/ToC.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { Link } from 'gatsby'\nimport { GatsbyLinkProps } from 'components/Main/CategoryList'\n\nexport type PostHeadInfoProps = {\n  title: string\n  date: string\n  categories: string[]\n}\n\nconst PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 auto;\n  padding: 60px 100px;\n`\n\nconst Title = styled.h1`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  margin-top: auto;\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 40px;\n  font-weight: 800;\n\n  @media (max-width: 768px) {\n    font-size: 30px;\n  }\n`\n\nconst PostData = styled.div`\n  display: flex;\n  flex-direction: column;\n  // align-items: center;\n  margin-top: 10px;\n  font-size: 18px;\n  font-weight: 700;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    font-size: 15px;\n    font-weight: 400;\n  }\n`\n\n// const CategoryLink = styled.\nconst CategoryLink = styled(({ ...props }: GatsbyLinkProps) => (\n  <Link {...props} />\n))<any>`\n  cursor: pointer;\n  margin-right: 10px;\n`\n\nconst CategoryListWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  // const goBackPage = () => window.history.back()\n\n  return (\n    <PostHeadInfoWrapper>\n      <Title>{title}</Title>\n      <PostData>\n        <div>{date}</div>\n        <CategoryListWrapper>\n          {categories.map(category => {\n            return (\n              <CategoryLink to={`/?category=${category}`} key={category}>\n                #{category}\n              </CategoryLink>\n            )\n          })}\n        </CategoryListWrapper>\n      </PostData>\n    </PostHeadInfoWrapper>\n  )\n}\n\nexport default PostHeadInfo\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\n\ntype PostHeadProps = PostHeadInfoProps\n\nconst PostHeadWrapper = styled.div`\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  return (\n    <PostHeadWrapper>\n      <PostHeadInfo title={title} date={date} categories={categories} />\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ninterface PostContentProps {\n  html: string\n}\n\nconst MarkdownRenderer = styled.div`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  padding: 0 100px;\n  word-break: break-all;\n\n  // Markdown Style\n  line-height: 1.8;\n  font-size: 18px;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 10px 0;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 800;\n    margin-bottom: 20px;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 60px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 + h2,\n  h2 + h3,\n  h1 + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 26px;\n  }\n\n  h3 {\n    font-size: 22px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 30px 0;\n    padding: 5px 15px;\n    border-left: 2px solid #000000;\n    font-weight: 800;\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 10px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid #000000;\n    margin: 24px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","// const ToC =\n\nimport styled from '@emotion/styled'\nimport { FunctionComponent } from 'react'\nimport { HeadingsType } from 'types/PostItem.types'\n\nexport type ToCProps = {\n  headings: HeadingsType[]\n}\n\nconst ToCWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 200px;\n  border-left: 5px solid #43464d;\n\n  @media (max-width: 1024px) {\n    display: none;\n  }\n`\n\nconst InnerScroll = styled.div`\n  scrollbar-width: thin;\n  scrollbar-color: #367ee9 rgba(48, 113, 209, 0.3);\n  overflow: hidden auto;\n`\n\nconst ToCElementListWrapper = styled.ul`\n  list-style: none;\n  margin-left: 10px;\n  margin-right: 10px;\n  margin-bottom: 0px;\n`\n\nconst ToCElement = styled.li`\n  margin-bottom: 0.25rem;\n`\n\nconst ToCLink = styled.a`\n  hover: text-black;\n  text-decoration: none;\n`\n\nconst ToC: FunctionComponent<ToCProps> = function ({ headings }) {\n  return (\n    <div>\n      <ToCWrapper>\n        <InnerScroll>\n          <ToCElementListWrapper>\n            {headings.map(heading => {\n              return (\n                <ToCElement key={heading.value}>\n                  <ToCLink\n                    href={`#${heading.value\n                      .replace(/\\s+/g, '-')\n                      .toLowerCase()}`}\n                  >\n                    {heading.value}\n                  </ToCLink>\n                </ToCElement>\n              )\n            })}\n          </ToCElementListWrapper>\n        </InnerScroll>\n      </ToCWrapper>\n    </div>\n  )\n}\n\nexport default ToC\n","import React, { createRef, FunctionComponent, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'dev-strender/blog-comments'\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget: FunctionComponent = function () {\n  const element = createRef<HTMLDivElement>()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget\n","import React, { FunctionComponent, useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent'\nimport ToC from 'components/Post/ToC'\nimport CommentWidget from 'components/Post/CommentWidget'\nimport { HeadingsType, PostFrontmatterType } from 'types/PostItem.types'\nimport styled from '@emotion/styled'\n\nexport type PostPageItemType = {\n  node: {\n    html: string\n    headings: HeadingsType[]\n    frontmatter: PostFrontmatterType\n  }\n}\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n}\n\nconst PostTemplateWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst PostContentWrapper = styled.div`\n  display: flex;\n  flex-direction: row;\n`\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n}) {\n  const {\n    node: {\n      html,\n      headings,\n      frontmatter: { title, date, categories },\n    },\n  } = edges[0]\n\n  return (\n    <Template>\n      <PostTemplateWrapper>\n        <PostHead title={title} date={date} categories={categories} />\n        <PostContentWrapper>\n          <div>\n            <PostContent html={html} />\n            <CommentWidget />\n          </div>\n          <ToC headings={headings} />\n        </PostContentWrapper>\n      </PostTemplateWrapper>\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          headings {\n            value\n            depth\n          }\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["PostHeadInfoWrapper","Title","PostData","CategoryLink","props","CategoryListWrapper","title","date","categories","map","category","to","key","PostHeadWrapper","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","ToCWrapper","InnerScroll","ToCElementListWrapper","ToCElement","ToCLink","headings","heading","value","href","replace","toLowerCase","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","setAttribute","appendChild","ref","PostTemplateWrapper","PostContentWrapper","data","allMarkdownRemark","edges","node","frontmatter","Template"],"sourceRoot":""}